/*! For license information please see main~b511eb9f.580664a47e3547c51ab9.js.LICENSE.txt */
(self.webpackChunkgenerators=self.webpackChunkgenerators||[]).push([[814],{830:function(e){var t;t=function(){return(()=>{var e={"./node_modules/seedrandom/index.js":(e,t,r)=>{var i=r("./node_modules/seedrandom/lib/alea.js"),o=r("./node_modules/seedrandom/lib/xor128.js"),s=r("./node_modules/seedrandom/lib/xorwow.js"),n=r("./node_modules/seedrandom/lib/xorshift7.js"),a=r("./node_modules/seedrandom/lib/xor4096.js"),l=r("./node_modules/seedrandom/lib/tychei.js"),d=r("./node_modules/seedrandom/seedrandom.js");d.alea=i,d.xor128=o,d.xorwow=s,d.xorshift7=n,d.xor4096=a,d.tychei=l,e.exports=d},"./node_modules/seedrandom/lib/alea.js":function(e,t,r){var i;!function(e,o,s){function n(e){var t,r=this,i=(t=4022871197,function(e){e=String(e);for(var r=0;r<e.length;r++){var i=.02519603282416938*(t+=e.charCodeAt(r));i-=t=i>>>0,t=(i*=t)>>>0,t+=4294967296*(i-=t)}return 2.3283064365386963e-10*(t>>>0)});r.next=function(){var e=2091639*r.s0+2.3283064365386963e-10*r.c;return r.s0=r.s1,r.s1=r.s2,r.s2=e-(r.c=0|e)},r.c=1,r.s0=i(" "),r.s1=i(" "),r.s2=i(" "),r.s0-=i(e),r.s0<0&&(r.s0+=1),r.s1-=i(e),r.s1<0&&(r.s1+=1),r.s2-=i(e),r.s2<0&&(r.s2+=1),i=null}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var r=new n(e),i=t&&t.state,o=r.next;return o.int32=function(){return 4294967296*r.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,i&&("object"==typeof i&&a(i,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=l:r.amdD&&r.amdO?void 0===(i=function(){return l}.call(t,r,t,o))||(o.exports=i):this.alea=l}(0,e=r.nmd(e),r.amdD)},"./node_modules/seedrandom/lib/tychei.js":function(e,t,r){var i;!function(e,o,s){function n(e){var t=this,r="";t.next=function(){var e=t.b,r=t.c,i=t.d,o=t.a;return e=e<<25^e>>>7^r,r=r-i|0,i=i<<24^i>>>8^o,o=o-e|0,t.b=e=e<<20^e>>>12^r,t.c=r=r-i|0,t.d=i<<16^r>>>16^o,t.a=o-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):r+=e;for(var i=0;i<r.length+20;i++)t.b^=0|r.charCodeAt(i),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var r=new n(e),i=t&&t.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=r.next,o.quick=o,i&&("object"==typeof i&&a(i,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=l:r.amdD&&r.amdO?void 0===(i=function(){return l}.call(t,r,t,o))||(o.exports=i):this.tychei=l}(0,e=r.nmd(e),r.amdD)},"./node_modules/seedrandom/lib/xor128.js":function(e,t,r){var i;!function(e,o,s){function n(e){var t=this,r="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:r+=e;for(var i=0;i<r.length+64;i++)t.x^=0|r.charCodeAt(i),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var r=new n(e),i=t&&t.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=r.next,o.quick=o,i&&("object"==typeof i&&a(i,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=l:r.amdD&&r.amdO?void 0===(i=function(){return l}.call(t,r,t,o))||(o.exports=i):this.xor128=l}(0,e=r.nmd(e),r.amdD)},"./node_modules/seedrandom/lib/xor4096.js":function(e,t,r){var i;!function(e,o,s){function n(e){var t=this;t.next=function(){var e,r,i=t.w,o=t.X,s=t.i;return t.w=i=i+1640531527|0,r=o[s+34&127],e=o[s=s+1&127],r^=r<<13,e^=e<<17,r^=r>>>15,e^=e>>>12,r=o[s]=r^e,t.i=s,r+(i^i>>>16)|0},function(e,t){var r,i,o,s,n,a=[],l=128;for(t===(0|t)?(i=t,t=null):(t+="\0",i=0,l=Math.max(l,t.length)),o=0,s=-32;s<l;++s)t&&(i^=t.charCodeAt((s+32)%t.length)),0===s&&(n=i),i^=i<<10,i^=i>>>15,i^=i<<4,i^=i>>>13,s>=0&&(n=n+1640531527|0,o=0==(r=a[127&s]^=i+n)?o+1:0);for(o>=128&&(a[127&(t&&t.length||0)]=-1),o=127,s=512;s>0;--s)i=a[o+34&127],r=a[o=o+1&127],i^=i<<13,r^=r<<17,i^=i>>>15,r^=r>>>12,a[o]=i^r;e.w=n,e.X=a,e.i=o}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var r=new n(e),i=t&&t.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=r.next,o.quick=o,i&&(i.X&&a(i,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=l:r.amdD&&r.amdO?void 0===(i=function(){return l}.call(t,r,t,o))||(o.exports=i):this.xor4096=l}(0,e=r.nmd(e),r.amdD)},"./node_modules/seedrandom/lib/xorshift7.js":function(e,t,r){var i;!function(e,o,s){function n(e){var t=this;t.next=function(){var e,r,i=t.x,o=t.i;return e=i[o],r=(e^=e>>>7)^e<<24,r^=(e=i[o+1&7])^e>>>10,r^=(e=i[o+3&7])^e>>>3,r^=(e=i[o+4&7])^e<<7,e=i[o+7&7],r^=(e^=e<<13)^e<<9,i[o]=r,t.i=o+1&7,r},function(e,t){var r,i=[];if(t===(0|t))i[0]=t;else for(t=""+t,r=0;r<t.length;++r)i[7&r]=i[7&r]<<15^t.charCodeAt(r)+i[r+1&7]<<13;for(;i.length<8;)i.push(0);for(r=0;r<8&&0===i[r];++r);for(8==r?i[7]=-1:i[r],e.x=i,e.i=0,r=256;r>0;--r)e.next()}(t,e)}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var r=new n(e),i=t&&t.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=r.next,o.quick=o,i&&(i.x&&a(i,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=l:r.amdD&&r.amdO?void 0===(i=function(){return l}.call(t,r,t,o))||(o.exports=i):this.xorshift7=l}(0,e=r.nmd(e),r.amdD)},"./node_modules/seedrandom/lib/xorwow.js":function(e,t,r){var i;!function(e,o,s){function n(e){var t=this,r="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:r+=e;for(var i=0;i<r.length+64;i++)t.x^=0|r.charCodeAt(i),i==r.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var r=new n(e),i=t&&t.state,o=function(){return(r.next()>>>0)/4294967296};return o.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=r.next,o.quick=o,i&&("object"==typeof i&&a(i,r),o.state=function(){return a(r,{})}),o}o&&o.exports?o.exports=l:r.amdD&&r.amdO?void 0===(i=function(){return l}.call(t,r,t,o))||(o.exports=i):this.xorwow=l}(0,e=r.nmd(e),r.amdD)},"./node_modules/seedrandom/seedrandom.js":function(e,t,r){var i;!function(o,s,n){var a,l=256,d=n.pow(l,6),c=n.pow(2,52),h=2*c,u=255;function f(e,t,r){var i=[],u=p(m((t=1==t?{entropy:!0}:t||{}).entropy?[e,v(s)]:null==e?function(){try{var e;return a&&(e=a.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),v(e)}catch(e){var t=o.navigator,r=t&&t.plugins;return[+new Date,o,r,o.screen,v(s)]}}():e,3),i),f=new g(i),w=function(){for(var e=f.g(6),t=d,r=0;e<c;)e=(e+r)*l,t*=l,r=f.g(1);for(;e>=h;)e/=2,t/=2,r>>>=1;return(e+r)/t};return w.int32=function(){return 0|f.g(4)},w.quick=function(){return f.g(4)/4294967296},w.double=w,p(v(f.S),s),(t.pass||r||function(e,t,r,i){return i&&(i.S&&b(i,f),e.state=function(){return b(f,{})}),r?(n.random=e,t):e})(w,u,"global"in t?t.global:this==n,t.state)}function g(e){var t,r=e.length,i=this,o=0,s=i.i=i.j=0,n=i.S=[];for(r||(e=[r++]);o<l;)n[o]=o++;for(o=0;o<l;o++)n[o]=n[s=u&s+e[o%r]+(t=n[o])],n[s]=t;(i.g=function(e){for(var t,r=0,o=i.i,s=i.j,n=i.S;e--;)t=n[o=u&o+1],r=r*l+n[u&(n[o]=n[s=u&s+t])+(n[s]=t)];return i.i=o,i.j=s,r})(l)}function b(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function m(e,t){var r,i=[],o=typeof e;if(t&&"object"==o)for(r in e)try{i.push(m(e[r],t-1))}catch(e){}return i.length?i:"string"==o?e:e+"\0"}function p(e,t){for(var r,i=e+"",o=0;o<i.length;)t[u&o]=u&(r^=19*t[u&o])+i.charCodeAt(o++);return v(t)}function v(e){return String.fromCharCode.apply(0,e)}if(p(n.random(),s),e.exports){e.exports=f;try{a=r("?8465")}catch(e){}}else void 0===(i=function(){return f}.call(t,r,t,e))||(e.exports=i)}("undefined"!=typeof self?self:this,[],Math)},"./node_modules/tinycolor2/tinycolor.js":(e,t,r)=>{var i;!function(o){var s=/^\s+/,n=/\s+$/,a=0,l=o.round,d=o.min,c=o.max,h=o.random;function u(e,t){if(t=t||{},(e=e||"")instanceof u)return e;if(!(this instanceof u))return new u(e,t);var r=function(e){var t,r,i,a={r:0,g:0,b:0},l=1,h=null,u=null,f=null,g=!1,b=!1;return"string"==typeof e&&(e=function(e){e=e.replace(s,"").replace(n,"").toLowerCase();var t,r=!1;if(A[e])e=A[e],r=!0;else if("transparent"==e)return{r:0,g:0,b:0,a:0,format:"name"};return(t=N.rgb.exec(e))?{r:t[1],g:t[2],b:t[3]}:(t=N.rgba.exec(e))?{r:t[1],g:t[2],b:t[3],a:t[4]}:(t=N.hsl.exec(e))?{h:t[1],s:t[2],l:t[3]}:(t=N.hsla.exec(e))?{h:t[1],s:t[2],l:t[3],a:t[4]}:(t=N.hsv.exec(e))?{h:t[1],s:t[2],v:t[3]}:(t=N.hsva.exec(e))?{h:t[1],s:t[2],v:t[3],a:t[4]}:(t=N.hex8.exec(e))?{r:F(t[1]),g:F(t[2]),b:F(t[3]),a:q(t[4]),format:r?"name":"hex8"}:(t=N.hex6.exec(e))?{r:F(t[1]),g:F(t[2]),b:F(t[3]),format:r?"name":"hex"}:(t=N.hex4.exec(e))?{r:F(t[1]+""+t[1]),g:F(t[2]+""+t[2]),b:F(t[3]+""+t[3]),a:q(t[4]+""+t[4]),format:r?"name":"hex8"}:!!(t=N.hex3.exec(e))&&{r:F(t[1]+""+t[1]),g:F(t[2]+""+t[2]),b:F(t[3]+""+t[3]),format:r?"name":"hex"}}(e)),"object"==typeof e&&(G(e.r)&&G(e.g)&&G(e.b)?(t=e.r,r=e.g,i=e.b,a={r:255*D(t,255),g:255*D(r,255),b:255*D(i,255)},g=!0,b="%"===String(e.r).substr(-1)?"prgb":"rgb"):G(e.h)&&G(e.s)&&G(e.v)?(h=O(e.s),u=O(e.v),a=function(e,t,r){e=6*D(e,360),t=D(t,100),r=D(r,100);var i=o.floor(e),s=e-i,n=r*(1-t),a=r*(1-s*t),l=r*(1-(1-s)*t),d=i%6;return{r:255*[r,a,n,n,l,r][d],g:255*[l,r,r,a,n,n][d],b:255*[n,n,l,r,r,a][d]}}(e.h,h,u),g=!0,b="hsv"):G(e.h)&&G(e.s)&&G(e.l)&&(h=O(e.s),f=O(e.l),a=function(e,t,r){var i,o,s;function n(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+6*(t-e)*r:r<.5?t:r<2/3?e+(t-e)*(2/3-r)*6:e}if(e=D(e,360),t=D(t,100),r=D(r,100),0===t)i=o=s=r;else{var a=r<.5?r*(1+t):r+t-r*t,l=2*r-a;i=n(l,a,e+1/3),o=n(l,a,e),s=n(l,a,e-1/3)}return{r:255*i,g:255*o,b:255*s}}(e.h,h,f),g=!0,b="hsl"),e.hasOwnProperty("a")&&(l=e.a)),l=I(l),{ok:g,format:e.format||b,r:d(255,c(a.r,0)),g:d(255,c(a.g,0)),b:d(255,c(a.b,0)),a:l}}(e);this._originalInput=e,this._r=r.r,this._g=r.g,this._b=r.b,this._a=r.a,this._roundA=l(100*this._a)/100,this._format=t.format||r.format,this._gradientType=t.gradientType,this._r<1&&(this._r=l(this._r)),this._g<1&&(this._g=l(this._g)),this._b<1&&(this._b=l(this._b)),this._ok=r.ok,this._tc_id=a++}function f(e,t,r){e=D(e,255),t=D(t,255),r=D(r,255);var i,o,s=c(e,t,r),n=d(e,t,r),a=(s+n)/2;if(s==n)i=o=0;else{var l=s-n;switch(o=a>.5?l/(2-s-n):l/(s+n),s){case e:i=(t-r)/l+(t<r?6:0);break;case t:i=(r-e)/l+2;break;case r:i=(e-t)/l+4}i/=6}return{h:i,s:o,l:a}}function g(e,t,r){e=D(e,255),t=D(t,255),r=D(r,255);var i,o,s=c(e,t,r),n=d(e,t,r),a=s,l=s-n;if(o=0===s?0:l/s,s==n)i=0;else{switch(s){case e:i=(t-r)/l+(t<r?6:0);break;case t:i=(r-e)/l+2;break;case r:i=(e-t)/l+4}i/=6}return{h:i,s:o,v:a}}function b(e,t,r,i){var o=[M(l(e).toString(16)),M(l(t).toString(16)),M(l(r).toString(16))];return i&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0):o.join("")}function m(e,t,r,i){return[M(z(i)),M(l(e).toString(16)),M(l(t).toString(16)),M(l(r).toString(16))].join("")}function p(e,t){t=0===t?0:t||10;var r=u(e).toHsl();return r.s-=t/100,r.s=P(r.s),u(r)}function v(e,t){t=0===t?0:t||10;var r=u(e).toHsl();return r.s+=t/100,r.s=P(r.s),u(r)}function w(e){return u(e).desaturate(100)}function x(e,t){t=0===t?0:t||10;var r=u(e).toHsl();return r.l+=t/100,r.l=P(r.l),u(r)}function y(e,t){t=0===t?0:t||10;var r=u(e).toRgb();return r.r=c(0,d(255,r.r-l(-t/100*255))),r.g=c(0,d(255,r.g-l(-t/100*255))),r.b=c(0,d(255,r.b-l(-t/100*255))),u(r)}function _(e,t){t=0===t?0:t||10;var r=u(e).toHsl();return r.l-=t/100,r.l=P(r.l),u(r)}function W(e,t){var r=u(e).toHsl(),i=(r.h+t)%360;return r.h=i<0?360+i:i,u(r)}function k(e){var t=u(e).toHsl();return t.h=(t.h+180)%360,u(t)}function S(e){var t=u(e).toHsl(),r=t.h;return[u(e),u({h:(r+120)%360,s:t.s,l:t.l}),u({h:(r+240)%360,s:t.s,l:t.l})]}function j(e){var t=u(e).toHsl(),r=t.h;return[u(e),u({h:(r+90)%360,s:t.s,l:t.l}),u({h:(r+180)%360,s:t.s,l:t.l}),u({h:(r+270)%360,s:t.s,l:t.l})]}function H(e){var t=u(e).toHsl(),r=t.h;return[u(e),u({h:(r+72)%360,s:t.s,l:t.l}),u({h:(r+216)%360,s:t.s,l:t.l})]}function T(e,t,r){t=t||6,r=r||30;var i=u(e).toHsl(),o=360/r,s=[u(e)];for(i.h=(i.h-(o*t>>1)+720)%360;--t;)i.h=(i.h+o)%360,s.push(u(i));return s}function C(e,t){t=t||6;for(var r=u(e).toHsv(),i=r.h,o=r.s,s=r.v,n=[],a=1/t;t--;)n.push(u({h:i,s:o,v:s})),s=(s+a)%1;return n}u.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},getLuminance:function(){var e,t,r,i=this.toRgb();return e=i.r/255,t=i.g/255,r=i.b/255,.2126*(e<=.03928?e/12.92:o.pow((e+.055)/1.055,2.4))+.7152*(t<=.03928?t/12.92:o.pow((t+.055)/1.055,2.4))+.0722*(r<=.03928?r/12.92:o.pow((r+.055)/1.055,2.4))},setAlpha:function(e){return this._a=I(e),this._roundA=l(100*this._a)/100,this},toHsv:function(){var e=g(this._r,this._g,this._b);return{h:360*e.h,s:e.s,v:e.v,a:this._a}},toHsvString:function(){var e=g(this._r,this._g,this._b),t=l(360*e.h),r=l(100*e.s),i=l(100*e.v);return 1==this._a?"hsv("+t+", "+r+"%, "+i+"%)":"hsva("+t+", "+r+"%, "+i+"%, "+this._roundA+")"},toHsl:function(){var e=f(this._r,this._g,this._b);return{h:360*e.h,s:e.s,l:e.l,a:this._a}},toHslString:function(){var e=f(this._r,this._g,this._b),t=l(360*e.h),r=l(100*e.s),i=l(100*e.l);return 1==this._a?"hsl("+t+", "+r+"%, "+i+"%)":"hsla("+t+", "+r+"%, "+i+"%, "+this._roundA+")"},toHex:function(e){return b(this._r,this._g,this._b,e)},toHexString:function(e){return"#"+this.toHex(e)},toHex8:function(e){return function(e,t,r,i,o){var s=[M(l(e).toString(16)),M(l(t).toString(16)),M(l(r).toString(16)),M(z(i))];return o&&s[0].charAt(0)==s[0].charAt(1)&&s[1].charAt(0)==s[1].charAt(1)&&s[2].charAt(0)==s[2].charAt(1)&&s[3].charAt(0)==s[3].charAt(1)?s[0].charAt(0)+s[1].charAt(0)+s[2].charAt(0)+s[3].charAt(0):s.join("")}(this._r,this._g,this._b,this._a,e)},toHex8String:function(e){return"#"+this.toHex8(e)},toRgb:function(){return{r:l(this._r),g:l(this._g),b:l(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+l(this._r)+", "+l(this._g)+", "+l(this._b)+")":"rgba("+l(this._r)+", "+l(this._g)+", "+l(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:l(100*D(this._r,255))+"%",g:l(100*D(this._g,255))+"%",b:l(100*D(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+l(100*D(this._r,255))+"%, "+l(100*D(this._g,255))+"%, "+l(100*D(this._b,255))+"%)":"rgba("+l(100*D(this._r,255))+"%, "+l(100*D(this._g,255))+"%, "+l(100*D(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(R[b(this._r,this._g,this._b,!0)]||!1)},toFilter:function(e){var t="#"+m(this._r,this._g,this._b,this._a),r=t,i=this._gradientType?"GradientType = 1, ":"";if(e){var o=u(e);r="#"+m(o._r,o._g,o._b,o._a)}return"progid:DXImageTransform.Microsoft.gradient("+i+"startColorstr="+t+",endColorstr="+r+")"},toString:function(e){var t=!!e;e=e||this._format;var r=!1,i=this._a<1&&this._a>=0;return t||!i||"hex"!==e&&"hex6"!==e&&"hex3"!==e&&"hex4"!==e&&"hex8"!==e&&"name"!==e?("rgb"===e&&(r=this.toRgbString()),"prgb"===e&&(r=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(r=this.toHexString()),"hex3"===e&&(r=this.toHexString(!0)),"hex4"===e&&(r=this.toHex8String(!0)),"hex8"===e&&(r=this.toHex8String()),"name"===e&&(r=this.toName()),"hsl"===e&&(r=this.toHslString()),"hsv"===e&&(r=this.toHsvString()),r||this.toHexString()):"name"===e&&0===this._a?this.toName():this.toRgbString()},clone:function(){return u(this.toString())},_applyModification:function(e,t){var r=e.apply(null,[this].concat([].slice.call(t)));return this._r=r._r,this._g=r._g,this._b=r._b,this.setAlpha(r._a),this},lighten:function(){return this._applyModification(x,arguments)},brighten:function(){return this._applyModification(y,arguments)},darken:function(){return this._applyModification(_,arguments)},desaturate:function(){return this._applyModification(p,arguments)},saturate:function(){return this._applyModification(v,arguments)},greyscale:function(){return this._applyModification(w,arguments)},spin:function(){return this._applyModification(W,arguments)},_applyCombination:function(e,t){return e.apply(null,[this].concat([].slice.call(t)))},analogous:function(){return this._applyCombination(T,arguments)},complement:function(){return this._applyCombination(k,arguments)},monochromatic:function(){return this._applyCombination(C,arguments)},splitcomplement:function(){return this._applyCombination(H,arguments)},triad:function(){return this._applyCombination(S,arguments)},tetrad:function(){return this._applyCombination(j,arguments)}},u.fromRatio=function(e,t){if("object"==typeof e){var r={};for(var i in e)e.hasOwnProperty(i)&&(r[i]="a"===i?e[i]:O(e[i]));e=r}return u(e,t)},u.equals=function(e,t){return!(!e||!t)&&u(e).toRgbString()==u(t).toRgbString()},u.random=function(){return u.fromRatio({r:h(),g:h(),b:h()})},u.mix=function(e,t,r){r=0===r?0:r||50;var i=u(e).toRgb(),o=u(t).toRgb(),s=r/100;return u({r:(o.r-i.r)*s+i.r,g:(o.g-i.g)*s+i.g,b:(o.b-i.b)*s+i.b,a:(o.a-i.a)*s+i.a})},u.readability=function(e,t){var r=u(e),i=u(t);return(o.max(r.getLuminance(),i.getLuminance())+.05)/(o.min(r.getLuminance(),i.getLuminance())+.05)},u.isReadable=function(e,t,r){var i,o,s,n,a,l=u.readability(e,t);switch(o=!1,(s=r,n=((s=s||{level:"AA",size:"small"}).level||"AA").toUpperCase(),a=(s.size||"small").toLowerCase(),"AA"!==n&&"AAA"!==n&&(n="AA"),"small"!==a&&"large"!==a&&(a="small"),i={level:n,size:a}).level+i.size){case"AAsmall":case"AAAlarge":o=l>=4.5;break;case"AAlarge":o=l>=3;break;case"AAAsmall":o=l>=7}return o},u.mostReadable=function(e,t,r){var i,o,s,n,a=null,l=0;o=(r=r||{}).includeFallbackColors,s=r.level,n=r.size;for(var d=0;d<t.length;d++)(i=u.readability(e,t[d]))>l&&(l=i,a=u(t[d]));return u.isReadable(e,a,{level:s,size:n})||!o?a:(r.includeFallbackColors=!1,u.mostReadable(e,["#fff","#000"],r))};var A=u.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},R=u.hexNames=function(e){var t={};for(var r in e)e.hasOwnProperty(r)&&(t[e[r]]=r);return t}(A);function I(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function D(e,t){(function(e){return"string"==typeof e&&-1!=e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var r=function(e){return"string"==typeof e&&-1!=e.indexOf("%")}(e);return e=d(t,c(0,parseFloat(e))),r&&(e=parseInt(e*t,10)/100),o.abs(e-t)<1e-6?1:e%t/parseFloat(t)}function P(e){return d(1,c(0,e))}function F(e){return parseInt(e,16)}function M(e){return 1==e.length?"0"+e:""+e}function O(e){return e<=1&&(e=100*e+"%"),e}function z(e){return o.round(255*parseFloat(e)).toString(16)}function q(e){return F(e)/255}var L,B,E,N=(B="[\\s|\\(]+("+(L="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+L+")[,|\\s]+("+L+")\\s*\\)?",E="[\\s|\\(]+("+L+")[,|\\s]+("+L+")[,|\\s]+("+L+")[,|\\s]+("+L+")\\s*\\)?",{CSS_UNIT:new RegExp(L),rgb:new RegExp("rgb"+B),rgba:new RegExp("rgba"+E),hsl:new RegExp("hsl"+B),hsla:new RegExp("hsla"+E),hsv:new RegExp("hsv"+B),hsva:new RegExp("hsva"+E),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function G(e){return!!N.CSS_UNIT.exec(e)}e.exports?e.exports=u:void 0===(i=function(){return u}.call(t,r,t,e))||(e.exports=i)}(Math)},"./src/division.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o}),r("./node_modules/tinycolor2/tinycolor.js");var i=r("./src/utilities.js");r("./src/settings.js");const o=class{constructor(e={count,limit,color,seed}){this.limit=e.limit,this.seed=e.seed,this.seedMultiplier=i.generateSeedMultiplier(this.seed,this.constructor.name),this.color=void 0!==e.color?i.generateColor(e.color):i.generateColor(void 0,this.seed,this.seedMultiplier),this.count=void 0!==e.count?e.count:i.generateCount(e.limit,this.seed,this.seedMultiplier)}}},"./src/divisions/Bend.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var i=r("./src/utilities.js"),o=r("./src/settings.js"),s=r("./src/division.js");class n extends s.default{constructor(e={seed,limit:t,count:1,direction,party:!1,color,width,border,borderWidth,borderColor}){let t;t=e.party?1:e.limit?e.limit:3,super({seed:e.seed,count:e.count,limit:t,color:e.color}),this.party=e.party,this.border=e.border,this.width=e.width,this.direction=void 0!==e.direction?e.direction:this.generateDirection(this.seed),this.borderWidth=e.borderWidth||50,this.borderColor=e.borderColor||i.generateColor(void 0,.5)}generateDirection(e=this.seed){let t;const r=i.getLastDigit(i.modifySeed(e,this.seedMultiplier));if(r>=0&&r<=5)t="dexter";else{if(!(r>=6&&r<=9))throw new Error("seedDigit was not between 0 and 9");t="sinister"}return t}drawInstructions(e){let t;switch(e){case"dexter":t=this.drawInstructionsDexter();break;case"sinister":t=this.drawInstructionsSinister();break;default:throw new Error("Direction passed to Bend's drawInstructions method was not one of 'sinister' or 'dexter'.")}return t}drawInstructionsDexter(e=this.party){let t;return t=e?[{moveTo:[0,0]},{lineTo:[o.default.flagWidth,o.default.flagHeight]},{lineTo:[0,o.default.flagHeight]},{lineTo:[0,0]}]:[{moveTo:[0,0]},{lineTo:[o.default.flagWidth,o.default.flagHeight]}],t}drawInstructionsSinister(e=this.party){let t;return t=e?[{moveTo:[o.default.flagWidth,0]},{lineTo:[0,o.default.flagHeight]},{lineTo:[o.default.flagWidth,o.default.flagHeight]},{lineTo:[o.default.flagWidth,0]}]:[{moveTo:[o.default.flagWidth,0]},{lineTo:[0,o.default.flagHeight]}],t}shiftStep(e,t,r){return(i,o)=>{let s;return s=t===r?0===o?i+e:i-e:i+e,s}}draw(e){const t=this.drawInstructions(this.direction),r=this.width||Math.round(100*this.seed);e.beginPath();for(let i=0,o=this.count;i<o;i++){let o=0;if(2===this.count)switch(!0){case 0===i&&!this.party:o=-70;break;case 1===i:o=70}else if(3===this.count)switch(i){case 0:o=0;break;case 1:o=-100;break;case 2:o=100}if(this.border&&!this.party){for(let r=0,i=t.length;r<i;r++){const i=Object.keys(t[r]),s=Object.values(t[r])[0];e[i](...s.map(this.shiftStep(o,this.direction,"dexter")))}e.lineWidth=r+this.borderWidth,e.strokeStyle=this.color.complement,e.stroke()}for(let r=0,i=t.length;r<i;r++){const i=Object.keys(t[r]),s=Object.values(t[r])[0];e[i](...s.map(this.shiftStep(o,this.direction,"dexter")))}if(this.party){e.fillStyle=this.color.color,e.fill();break}e.strokeStyle=this.color.color,e.lineWidth=r,e.stroke()}}}},"./src/divisions/Border.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var i=r("./src/settings.js"),o=r("./src/division.js");class s extends o.default{constructor(e={seed,color,borderWidth}){super({seed:e.seed,count:1,limit:1,color:e.color}),this.borderWidth=e.borderWidth||20}draw(e){e.lineWidth=this.borderWidth,e.strokeStyle=this.color.color,e.strokeRect(0,0,i.default.flagWidth,i.default.flagHeight)}}},"./src/divisions/Canton.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Canton:()=>s});var i=r("./src/settings.js"),o=r("./src/division.js");class s extends o.default{constructor(e,t){super(1,1,e),this.aspect=t}drawInstructions(){return[{moveTo:[0,0]},{lineTo:[i.default.flagWidth/2,i.default.flagHeight/2]},{lineTo:[0,i.default.flagHeight]}]}draw(){}}},"./src/divisions/Chevron.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var i=r("./src/utilities.js"),o=r("./src/settings.js"),s=r("./src/division.js");class n extends s.default{constructor(e={direction,color,width,border,borderWidth,borderColor,seed}){super({seed:e.seed,count:1,limit:1,color:e.color}),this.border=e.border,this.width=e.width,this.direction=void 0!==e.direction?e.direction:this.generateDirection(),this.borderWidth=e.borderWidth||50,this.borderColor=e.borderColor||i.generateColor(void 0,.5)}generateDirection(e=this.seed){let t;const r=i.getLastDigit(i.modifySeed(this.seed,this.seedMultiplier));return t=r>=1&&r<=3?"palewise":4===r||5===r?"fesswise":6===r||7===r?"palewiseReversed":"fesswiseReversed",t}drawInstructions(e){let t;switch(e){case"palewise":t=this.drawInstructionsPalewise();break;case"palewiseReversed":t=this.drawInstructionsPalewise(!0);break;case"fesswise":t=this.drawInstructionsFesswise();break;case"fesswiseReversed":t=this.drawInstructionsFesswise(!0)}return t}drawInstructionsPalewise(e){let t;return t=e?[{moveTo:[o.default.flagWidth,0]},{lineTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[o.default.flagWidth,o.default.flagHeight]}]:[{moveTo:[0,0]},{lineTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[0,o.default.flagHeight]}],t}drawInstructionsFesswise(e){let t;return t=e?[{moveTo:[0,o.default.flagHeight]},{lineTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[o.default.flagWidth,o.default.flagHeight]}]:[{moveTo:[0,0]},{lineTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[o.default.flagWidth,0]}],t}draw(e){const t=this.drawInstructions(this.direction),r=this.width||Math.round(100*this.seed);if(e.beginPath(),this.border){for(let r=0,i=t.length;r<i;r++){const i=Object.keys(t[r]),o=Object.values(t[r])[0];e[i](...o)}e.lineWidth=r+this.borderWidth,e.strokeStyle=this.color.complement,e.stroke()}for(let r=0,i=t.length;r<i;r++){const i=Object.keys(t[r]),o=Object.values(t[r])[0];e[i](...o)}e.strokeStyle=this.color.color,e.lineWidth=r,e.stroke()}}},"./src/divisions/Cross.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var i=r("./src/division.js"),o=r("./src/utilities.js"),s=r("./src/settings.js");class n extends i.default{constructor(e={crossType,color,width,border:!1,borderWidth,borderColor}){super({seed:e.seed,count:1,limit:1,color:e.color}),this.crossType=void 0!==e.crossType?e.crossType:this.generateCrossType(this.seed,this.seedMultiplier),this.crossWidth=e.width||this.generateCrossWidth(this.seed,this.seedMultiplier),this.border=e.border,this.borderWidth=e.borderWidth||this.generateBorderWidth(this.seed+this.seedMultiplier),this.borderColor=o.generateColor(e.borderColor)||o.generateColor(void 0,this.seed*this.seedMultiplier,this.seedMultiplier)}generateCrossType(e,t){const r=["nordic","greek","symmetric"];let i;return(""+e*t*e).split("").map(((e,t)=>{0!==parseInt(e)&&1!==parseInt(e)&&2!==parseInt(e)||(i=r[parseInt(e)])})),i}generateCrossWidth(e,t){const r=e||this.seed,i=t||this.seedMultiplier;let s;return s=Math.ceil(100*o.modifySeed(r,i))+1,s>=100&&(s/=2),s}generateBorderWidth(){return this.crossWidth+.6*this.crossWidth}draw(e){switch(this.crossType){case"nordic":this.drawNordicCross(e);break;case"greek":this.drawGreekCross(e);break;case"symmetric":this.drawSymmetricCross(e)}}drawNordicCross(e){const t=(t,r)=>{e.beginPath(),e.moveTo(0,s.default.flagHeight/2),e.lineTo(s.default.flagWidth,s.default.flagHeight/2),e.moveTo(s.default.flagWidth/3,0),e.lineTo(s.default.flagWidth/3,s.default.flagHeight),e.strokeStyle=r,e.lineWidth=t,e.stroke()};!0===this.border&&this.borderWidth>0&&/^#/.test(this.borderColor.color)?(t(this.borderWidth,this.borderColor.color),t(this.crossWidth,this.color.color)):t(this.crossWidth,this.color.color)}drawGreekCross(e){const t=.2*o.findGreaterNumber(s.default.flagWidth,s.default.flagHeight),r=t+this.borderWidth/12,i=(r,i,o=0)=>{e.beginPath(),e.moveTo(s.default.flagWidth/2,s.default.flagHeight/2),e.lineTo(s.default.flagWidth/2-(o+ +(o-t)),s.default.flagHeight/2),e.moveTo(s.default.flagWidth/2,s.default.flagHeight/2),e.lineTo(s.default.flagWidth/2+(o+ +(o-t)),s.default.flagHeight/2),e.moveTo(s.default.flagWidth/2,s.default.flagHeight/2),e.lineTo(s.default.flagWidth/2,s.default.flagHeight/2-(o+ +(o-t))),e.moveTo(s.default.flagWidth/2,s.default.flagHeight/2),e.lineTo(s.default.flagWidth/2,s.default.flagHeight/2+(o+ +(o-t))),e.strokeStyle=i,e.lineWidth=r,e.stroke()};!0===this.border&&this.borderWidth>0&&/^#/.test(this.borderColor.color)?(i(this.borderWidth,this.borderColor.color,r),i(this.crossWidth,this.color.color)):i(this.crossWidth,this.color.color)}drawSymmetricCross(e){const t=(t,r)=>{e.beginPath(),e.moveTo(0,s.default.flagHeight/2),e.lineTo(s.default.flagWidth,s.default.flagHeight/2),e.moveTo(s.default.flagWidth/2,0),e.lineTo(s.default.flagWidth/2,s.default.flagHeight),e.strokeStyle=r,e.lineWidth=t,e.stroke()};!0===this.border&&this.borderWidth>0&&/^#/.test(this.borderColor.color)?(t(this.borderWidth,this.borderColor.color),t(this.crossWidth,this.color.color)):t(this.crossWidth,this.color.color)}}},"./src/divisions/Fesses.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var i=r("./src/division.js");class o extends i.default{constructor(e={seed,count,gapPercentage,color}){super({seed:e.seed,count:e.count,limit:3,color:e.color}),this.gapPercentage=e.gapPercentage||0}draw(e,t=500,r=this.gapPercentage){let i,o,s,n,a,l,d;1===this.count&&(r=33),a=100/this.count/100,n=2*this.count-(this.count-1),o=r/100,s=o*n,i=t*o,d=t-s*t,l=a*d;let c=i;for(let t=0;t<this.count;t++){switch(this.count){case 1:e.fillStyle=this.color.color;break;case 2:e.fillStyle=0===t?this.color.color:this.color.complement;break;case 3:e.fillStyle=this.color.triad[t];break;case 4:e.fillStyle=this.color.tetrad[t];break;default:e.fillStyle=this.color.monochromatic[t]}let r=0,o=c,s=l,n=300;c=c+l+i,e.fillRect(o,r,s,n)}}}},"./src/divisions/Fusil.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var i=r("./src/division.js"),o=(r("./src/utilities.js"),r("./src/settings.js"));class s extends i.default{constructor(e={seed,color}){super({seed:e.seed,count:1,limit:1,color:e.color})}draw(e){e.beginPath(),e.moveTo(o.default.flagWidth/2,0),e.lineTo(o.default.flagWidth-o.default.flagWidth/4,o.default.flagHeight/2),e.lineTo(o.default.flagWidth/2,o.default.flagHeight),e.lineTo(0+o.default.flagWidth/4,o.default.flagHeight/2),e.fillStyle=this.color.color,e.fill()}}},"./src/divisions/Lozenge.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var i=r("./src/division.js"),o=(r("./src/utilities.js"),r("./src/settings.js"));class s extends i.default{constructor(e={seed,color}){super({seed:e.seed,count:1,limit:1,color:e.color})}draw(e){e.beginPath(),e.moveTo(o.default.flagWidth/2,0),e.lineTo(o.default.flagWidth,o.default.flagHeight/2),e.lineTo(o.default.flagWidth/2,o.default.flagHeight),e.lineTo(0,o.default.flagHeight/2),e.fillStyle=this.color.color,e.fill()}}},"./src/divisions/Pales.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var i=r("./src/settings.js"),o=r("./src/division.js");class s extends o.default{constructor(e={count,gapPercentage,color}){super({seed:e.seed,count:e.count,limit:3,color:e.color}),this.gapPercentage=e.gapPercentage||0}draw(e,t=i.default.flagWidth,r=i.default.flagHeight,o=this.gapPercentage){let s,n,a,l,d,c,h;1===this.count&&(o=33),d=100/this.count/100,l=2*this.count-(this.count-1),n=o/100,a=n*l,s=r*n,h=r-a*r,c=d*h;let u=s;for(let r=0;r<this.count;r++){switch(this.count){case 1:e.fillStyle=this.color.color;break;case 2:e.fillStyle=0===r?this.color.color:this.color.complement;break;case 3:e.fillStyle=this.color.triad[r];break;case 4:e.fillStyle=this.color.tetrad[r];break;default:e.fillStyle=this.color.monochromatic[r]}let i=u,o=0,n=t,a=c;u=u+c+s,e.fillRect(o,i,n,a)}}}},"./src/divisions/Pall.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var i=r("./src/utilities.js"),o=r("./src/settings.js"),s=r("./src/division.js");class n extends s.default{constructor(e={seed,direction,color,width,border,borderWidth,borderColor}){super({seed:e.seed,count:1,limit:1,color:e.color}),this.border=e.border,this.width=e.width,this.direction=void 0!==e.direction?e.direction:this.generateDirection(),this.borderWidth=e.borderWidth||50,this.borderColor=e.borderColor||i.generateColor(void 0,.12345)}generateDirection(e=this.seed){let t;const r=i.getLastDigit(i.modifySeed(this.seed,this.seedMultiplier));return r>=1&&r<=4?t="palewise":5===r||6===r?t="fesswise":7===r||8===r?t="palewiseReversed":0!==r&&9!==r||(t="fesswiseReversed"),t}drawInstructions(e){let t;switch(e){case"palewise":t=this.drawInstructionsPalewise();break;case"palewiseReversed":t=this.drawInstructionsPalewise(!0);break;case"fesswise":t=this.drawInstructionsFesswise();break;case"fesswiseReversed":t=this.drawInstructionsFesswise(!0)}return t}drawInstructionsPalewise(e){let t;return t=e?[{moveTo:[o.default.flagWidth,0]},{lineTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[o.default.flagWidth,o.default.flagHeight]},{moveTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[0,o.default.flagHeight/2]}]:[{moveTo:[0,0]},{lineTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[0,o.default.flagHeight]},{moveTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[o.default.flagWidth,o.default.flagHeight/2]}],t}drawInstructionsFesswise(e){let t;return t=e?[{moveTo:[0,o.default.flagHeight]},{lineTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[o.default.flagWidth,o.default.flagHeight]},{moveTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[o.default.flagWidth/2,o.default.flagHeight-o.default.flagHeight]}]:[{moveTo:[0,0]},{lineTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[o.default.flagWidth,0]},{moveTo:[o.default.flagWidth/2,o.default.flagHeight/2]},{lineTo:[o.default.flagWidth/2,o.default.flagHeight]}],t}draw(e){const t=this.drawInstructions(this.direction),r=this.width||Math.round(100*this.seed);if(e.beginPath(),this.border){for(let r=0,i=t.length;r<i;r++){const i=Object.keys(t[r]),o=Object.values(t[r])[0];e[i](...o)}e.lineWidth=r+this.borderWidth,e.strokeStyle=this.color.complement,e.stroke()}for(let r=0,i=t.length;r<i;r++){const i=Object.keys(t[r]),o=Object.values(t[r])[0];e[i](...o)}e.strokeStyle=this.color.color,e.lineWidth=r,e.stroke()}}},"./src/divisions/Saltire.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var i=r("./src/settings.js"),o=r("./src/division.js");class s extends o.default{constructor(e={seed,count,border:!1,borderWidth:0,color,borderColor}){super({seed:e.seed,count:e.count,limit:1,color:e.color}),this.border=e.border,this.borderWidth=e.borderWidth>0?e.borderWidth:this.generateSaltireWidth(.1234*this.seed)}generateSaltireWidth(e=this.seed){return Math.round(100*e)}generateSaltireBorder(e=this.seed){let t={};return t.width=this.borderWidth,t}draw(e){const t=this.generateSaltireWidth();if(this.border){const r=this.generateSaltireBorder();e.beginPath(),e.moveTo(0,0),e.lineTo(i.default.flagWidth,i.default.flagHeight),e.moveTo(0,i.default.flagHeight),e.lineTo(i.default.flagWidth,0),e.strokeStyle=this.color.complement,e.lineWidth=t+2*r.width,e.stroke()}e.beginPath(),e.moveTo(0,0),e.lineTo(i.default.flagWidth,i.default.flagHeight),e.moveTo(0,i.default.flagHeight),e.lineTo(i.default.flagWidth,0),e.strokeStyle=this.color.color,e.lineWidth=t,e.stroke()}}const n=s},"./src/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>m});var i=r("./src/utilities.js"),o=r("./src/divisions/Bend.js"),s=r("./src/divisions/Border.js"),n=(r("./src/divisions/Canton.js"),r("./src/divisions/Chevron.js")),a=r("./src/divisions/Cross.js"),l=r("./src/divisions/Fesses.js"),d=r("./src/divisions/Fusil.js"),c=r("./src/divisions/Lozenge.js"),h=r("./src/divisions/Pales.js"),u=r("./src/divisions/Pall.js"),f=r("./src/divisions/Saltire.js"),g=r("./src/settings.js");class b{constructor(e={id,aspectRatio,divisionCount,divisions,seed,color}){this.seed=e.seed?e.seed:i.generateSeed(),this.color=i.generateColor(e.color,void 0,this.seed),this.aspect=e.aspectRatio?i.processAspectRatioString(e.aspectRatio):i.processAspectRatioString(this.generatePseudoRandomRatio()),this.dimensions=i.setDimensionsFromAspectObject(this.aspect),this.totalArea=this.dimensions.h*this.dimensions.w,this.divisionCount=e.divisionCount?e.divisionCount:i.generateCount(void 0,.4689,this.seed),this.divisions=this.generateDivisions(this.divisionCount),this.parentID=e.id,g.default.flagHeight=this.dimensions.h,g.default.flagWidth=this.dimensions.w,console.log("flag constructor params",e),console.log("flag generated color",this.color.color)}generatePseudoRandomRatio(e){const t=i.getLastDigit(this.seed),r=e||t>5?5:t,o=[[1,1],[1,2]];for(let e=1;e<r;e++){const t=o[e],r=o[e-1];let i=t[0]+r[0],s=t[1]+r[1];o[e+1]=[i,s]}const s=i.pseudoShuffle(o),n=i.getLastDigit(r);return console.log("arr",s),`${s[n][0]}:${s[n][1]}`}generateDivisions(e){const t={seed:this.seed};let r=[];const g=[new h.default(t),new a.default(t),new d.default(t),new s.default(t),new c.default(t),new l.default(t),new f.default(t),new u.default(t),new n.default(t),new o.default(t)],b=i.pseudoShuffle(g,this.seed);for(let t=0;t<e;t++)r.push(b[t]);return r}drawFlag(){const e=this.dimensions,t=this.divisions,r=this.color.color,o=this.seed,s="undefined"!==this.parentID?this.parentID:"root",n="flag_"+Math.round(100*o);i.generateCanvas(document,s,n,e);const a=document.getElementById(n).getContext("2d");a.fillStyle=r,a.fillRect(0,0,e.w,e.h);for(let e=0;e<t.length;e++)t[e].draw(a)}destroyFlag(e){document.getElementById("flag_"+Math.round(100*e)).remove()}}const m={settings:g.default,Utilities:i,Flag:b,flagGenerator:(e={id:"root",seed:void 0,subFlag:void 0})=>{console.log("Running the Flag Generator..."),console.log("Seed received by flagGenerator(): ",e.seed);const t=void 0!==e.seed?e.seed:i.generateSeed();return i.randomHex(t),console.log("got an ID from caller: ",e.id),new b(e.id,"3:5")}}},"./src/settings.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});const i={seed:!1,flagWidth:void 0,flagHeight:void 0}},"./src/utilities.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{generateSeed:()=>a,generateSeedMultiplier:()=>l,modifySeed:()=>d,getLastDigit:()=>c,randomHex:()=>h,hexToRgb:()=>u,convertHex:()=>f,generateColor:()=>g,pseudoShuffle:()=>b,processAspectRatioString:()=>m,setDimensionsFromAspectObject:()=>p,generateCanvas:()=>v,generateCount:()=>w,findGreaterNumber:()=>x});var i=r("./node_modules/seedrandom/index.js"),o=r.n(i),s=(r("./src/settings.js"),r("./node_modules/tinycolor2/tinycolor.js")),n=r.n(s);const a=e=>(void 0!==e?o()(e,{state:!0}):o()(Math.floor(1e9*Math.random()).toString(),{state:!0}))(),l=(e,t)=>{let r="";const i=(t=t.toString()).toString().split("");for(let e=0;e<i.length;e++)r+=i[e].charCodeAt(0);return r=parseFloat("."+r*e),r},d=(e,t)=>e*t,c=e=>+e.toString().substr(-1),h=(e,t)=>"#"+(d(e,t)%1*16777215<<0).toString(16).padStart(6,"0");function u(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}:null}const f=e=>{const t=u(e);return"rgb("+t.r+", "+t.g+", "+t.b+")"},g=(e,t=80857473,r)=>{let i=h(r,t);return/^#/.test(e)&&(i=e),{color:n()(i).toHexString(),complement:n()(i).complement().toHexString(),splitComplement:n()(i).splitcomplement().map((e=>e.toHexString())),triad:n()(i).triad().map((e=>e.toHexString())),tetrad:n()(i).tetrad().map((e=>e.toHexString())),analogous:n()(i).analogous().map((e=>e.toHexString())),monochromatic:n()(i).monochromatic().map((e=>e.toHexString()))}},b=(e,t)=>{let r,i,o=e.length;for(;o;)i=Math.floor(t*o--),r=e[o],e[o]=e[i],e[i]=r;return e},m=e=>{e=e.toString().split(":");let t={};for(let r=0;r<e.length;r++)switch(r){case 0:t.h=+e[r];break;case 1:t.w=+e[r];break;default:throw new Error("Could not process given aspect ratio string.")}return t},p=(e,t=100)=>({h:e.h*t,w:e.w*t}),v=(e,t,r,i)=>{const o=e.getElementById(t),s=e.createElement("canvas");s.setAttribute("id",r),s.setAttribute("style","border: 1px solid black;"),s.setAttribute("width",i.w),s.setAttribute("height",i.h),o.appendChild(s)},w=(e,t,r)=>{const i=d(r,t);let o=c(i);return(o>e||0===o)&&(o=1),o},x=(e,t)=>{let r;return r=e>=t?e:t,r}},"?8465":()=>{}},t={};function r(i){if(t[i])return t[i].exports;var o=t[i]={id:i,loaded:!1,exports:{}};return e[i].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}return r.amdD=function(){throw new Error("define cannot be used indirect")},r.amdO={},r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var i in t)r.o(t,i)&&!r.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r("./src/index.js")})()},e.exports=t()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,