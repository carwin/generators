/*! For license information please see main~d2eb5610.da0601ca2ab4e5d5d532.js.LICENSE.txt */
(self.webpackChunkgenerators=self.webpackChunkgenerators||[]).push([[660],{645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var u=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),l="/*# ".concat(c," */"),s=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(s).concat([l]).join("\n")}return[a].join("\n")}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,u,c=o(e),l=1;l<arguments.length;l++){for(var s in i=Object(arguments[l]))n.call(i,s)&&(c[s]=i[s]);if(t){u=t(i);for(var f=0;f<u.length;f++)r.call(i,u[f])&&(c[u[f]]=i[u[f]])}}return c}},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,u=60110,c=60112;t.Suspense=60113;var l=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),u=f("react.context"),c=f("react.forward_ref"),t.Suspense=f("react.suspense"),l=f("react.memo"),s=f("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function h(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||y}function b(){}function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||y}h.prototype.isReactComponent={},h.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(d(85));this.updater.enqueueSetState(this,e,t,"setState")},h.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=h.prototype;var _=m.prototype=new b;_.constructor=m,r(_,h.prototype),_.isPureReactComponent=!0;var w={current:null},g=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,a={},i=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)g.call(t,r)&&!k.hasOwnProperty(r)&&(a[r]=t[r]);var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){for(var l=Array(c),s=0;s<c;s++)l[s]=arguments[s+2];a.children=l}if(e&&e.defaultProps)for(r in c=e.defaultProps)void 0===a[r]&&(a[r]=c[r]);return{$$typeof:o,type:e,key:i,ref:u,props:a,_owner:w.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var j=/\/+/g;function S(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function E(e,t,n,r,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var c=!1;if(null===e)c=!0;else switch(u){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case o:case a:c=!0}}if(c)return i=i(c=e),e=""===r?"."+S(c,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(j,"$&/")+"/"),E(i,t,n,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||c&&c.key===i.key?"":(""+i.key).replace(j,"$&/")+"/")+e)),t.push(i)),1;if(c=0,r=""===r?".":r+":",Array.isArray(e))for(var l=0;l<e.length;l++){var s=r+S(u=e[l],l);c+=E(u,t,n,s,i)}else if("function"==typeof(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),l=0;!(u=e.next()).done;)c+=E(u=u.value,t,n,s=r+S(u,l++),i);else if("object"===u)throw t=""+e,Error(d(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return c}function T(e,t,n){if(null==e)return e;var r=[],o=0;return E(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function x(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function A(){var e=R.current;if(null===e)throw Error(d(321));return e}var P={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error(d(143));return e}},t.Component=h,t.PureComponent=m,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,n){if(null==e)throw Error(d(267,e));var a=r({},e.props),i=e.key,u=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,c=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)g.call(t,s)&&!k.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==l?l[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){l=Array(s);for(var f=0;f<s;f++)l[f]=arguments[f+2];a.children=l}return{$$typeof:o,type:e.type,key:i,ref:u,props:a,_owner:c}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:x}},t.memo=function(e,t){return{$$typeof:l,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return A().useCallback(e,t)},t.useContext=function(e,t){return A().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return A().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return A().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return A().useLayoutEffect(e,t)},t.useMemo=function(e,t){return A().useMemo(e,t)},t.useReducer=function(e,t,n){return A().useReducer(e,t,n)},t.useRef=function(e){return A().useRef(e)},t.useState=function(e){return A().useState(e)},t.version="17.0.1"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var u=Date,c=u.now();t.unstable_now=function(){return u.now()-c}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,s=null,f=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==l?setTimeout(n,0,e):(l=e,setTimeout(f,0))},r=function(e,t){s=setTimeout(e,t)},o=function(){clearTimeout(s)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,d=window.clearTimeout;if("undefined"!=typeof console){var y=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof y&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,h=null,b=-1,m=5,_=0;t.unstable_shouldYield=function(){return t.unstable_now()>=_},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):m=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,g=w.port2;w.port1.onmessage=function(){if(null!==h){var e=t.unstable_now();_=e+m;try{h(!0,e)?g.postMessage(null):(v=!1,h=null)}catch(e){throw g.postMessage(null),e}}else v=!1},n=function(e){h=e,v||(v=!0,g.postMessage(null))},r=function(e,n){b=p((function(){e(t.unstable_now())}),n)},o=function(){d(b),b=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<j(o,t)))break e;e[r]=t,e[n]=o,n=r}}function O(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],u=a+1,c=e[u];if(void 0!==i&&0>j(i,n))void 0!==c&&0>j(c,i)?(e[r]=c,e[u]=n,r=u):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==c&&0>j(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}return null}function j(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var S=[],E=[],T=1,x=null,R=3,A=!1,P=!1,$=!1;function M(e){for(var t=O(E);null!==t;){if(null===t.callback)C(E);else{if(!(t.startTime<=e))break;C(E),t.sortIndex=t.expirationTime,k(S,t)}t=O(E)}}function I(e){if($=!1,M(e),!P)if(null!==O(S))P=!0,n(L);else{var t=O(E);null!==t&&r(I,t.startTime-e)}}function L(e,n){P=!1,$&&($=!1,o()),A=!0;var a=R;try{for(M(n),x=O(S);null!==x&&(!(x.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=x.callback;if("function"==typeof i){x.callback=null,R=x.priorityLevel;var u=i(x.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?x.callback=u:x===O(S)&&C(S),M(n)}else C(S);x=O(S)}if(null!==x)var c=!0;else{var l=O(E);null!==l&&r(I,l.startTime-n),c=!1}return c}finally{x=null,R=a,A=!1}}var F=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){P||A||(P=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return O(S)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=F,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,a,i){var u=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?u+i:u,e){case 1:var c=-1;break;case 2:c=250;break;case 5:c=1073741823;break;case 4:c=1e4;break;default:c=5e3}return e={id:T++,callback:a,priorityLevel:e,startTime:i,expirationTime:c=i+c,sortIndex:-1},i>u?(e.sortIndex=i,k(E,e),null===O(S)&&e===O(E)&&($?o():$=!0,r(I,i-u))):(e.sortIndex=c,k(S,e),P||A||(P=!0,n(L))),e},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:(e,t,n)=>{"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function i(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var u=e[o],c=t.base?u[0]+t.base:u[0],l=n[c]||0,s="".concat(c," ").concat(l);n[c]=l+1;var f=i(s),p={css:u[1],media:u[2],sourceMap:u[3]};-1!==f?(a[f].references++,a[f].updater(p)):a.push({identifier:s,updater:v(p,t),references:1}),r.push(s)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,s=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=s(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var d=null,y=0;function v(e,t){var n,r,o;if(t.singleton){var a=y++;n=d||(d=c(t)),r=f.bind(null,n,a,!1),o=f.bind(null,n,a,!0)}else n=c(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=i(n[r]);a[o].references--}for(var c=u(e,t),l=0;l<n.length;l++){var s=i(n[l]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}n=c}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW5lcmF0b3JzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9nZW5lcmF0b3JzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZ2VuZXJhdG9ycy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vZ2VuZXJhdG9ycy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL2dlbmVyYXRvcnMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL2dlbmVyYXRvcnMvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2dlbmVyYXRvcnMvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ2VuZXJhdG9ycy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9nZW5lcmF0b3JzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9nZW5lcmF0b3JzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsIl9pIiwicHVzaCIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwidXJsIiwib3B0aW9ucyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaGFzT3duUHJvcGVydHkiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJrZXlzIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0Iiwic3ltYm9scyIsInRvIiwicyIsImFyZ3VtZW50cyIsImtleSIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsImVycm9yIiwibCIsInAiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJQcm9maWxlciIsInEiLCJyIiwidCIsIlN1c3BlbnNlIiwidSIsInYiLCJmb3IiLCJ3IiwieCIsInoiLCJhIiwiYiIsImMiLCJBIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkIiLCJDIiwicHJvcHMiLCJjb250ZXh0IiwicmVmcyIsInVwZGF0ZXIiLCJEIiwiRSIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsIkVycm9yIiwiZm9yY2VVcGRhdGUiLCJGIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJHIiwiY3VycmVudCIsIkgiLCJJIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJKIiwiZSIsImQiLCJrIiwiaCIsImciLCJjaGlsZHJlbiIsImYiLCJtIiwiZGVmYXVsdFByb3BzIiwiJCR0eXBlb2YiLCJ0eXBlIiwiX293bmVyIiwiTCIsIk0iLCJOIiwiZXNjYXBlIiwiTyIsIksiLCJ5IiwiUCIsIlEiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInRoZW4iLCJSIiwiUyIsIlQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJ0cmFuc2l0aW9uIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIkNoaWxkcmVuIiwiYXBwbHkiLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiQ29tcG9uZW50IiwiUHVyZUNvbXBvbmVudCIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiYmluZCIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJyZW5kZXIiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfcGF5bG9hZCIsIl9pbml0IiwibWVtbyIsImNvbXBhcmUiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ2ZXJzaW9uIiwicGVyZm9ybWFuY2UiLCJub3ciLCJ1bnN0YWJsZV9ub3ciLCJEYXRlIiwid2luZG93IiwiTWVzc2FnZUNoYW5uZWwiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiTWF0aCIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwicG9wIiwic29ydEluZGV4IiwiY2FsbGJhY2siLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlUiLCJWIiwicHJpb3JpdHlMZXZlbCIsIlciLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhbGwiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVu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eEQvRyxJQWdPVCxJQUFJZ0gsRUFBa0I1QyxFQUR0QmhSLEVBQU9BLEdBQVEsR0FDMEJrRSxHQUN6QyxPQUFPLFNBQWdCMlAsR0FHckIsR0FGQUEsRUFBVUEsR0FBVyxHQUUyQixtQkFBNUNsUyxPQUFPZSxVQUFVekMsU0FBUzBDLEtBQUtrUixHQUFuQyxDQUlBLElBQUssSUFBSXJULEVBQUksRUFBR0EsRUFBSW9ULEVBQWdCL1MsT0FBUUwsSUFBSyxDQUMvQyxJQUNJNFEsRUFBUVAsRUFESytDLEVBQWdCcFQsSUFFakNvUSxFQUFZUSxHQUFPSyxhQUtyQixJQUZBLElBQUlxQyxFQUFxQjlDLEVBQWE2QyxFQUFTM1AsR0FFdENuRCxFQUFLLEVBQUdBLEVBQUs2UyxFQUFnQi9TLE9BQVFFLElBQU0sQ0FDbEQsSUFFSWdULEVBQVNsRCxFQUZLK0MsRUFBZ0I3UyxJQUlLLElBQW5DNlAsRUFBWW1ELEdBQVF0QyxhQUN0QmIsRUFBWW1ELEdBQVEvTCxVQUVwQjRJLEVBQVlvRCxPQUFPRCxFQUFRLElBSS9CSCxFQUFrQkUiLCJmaWxlIjoibWFpbn5kMmViNTYxMC4zMmQ2NjAyMWZlMTNhMTg0ZTdhMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIG9wdGlvbnMgPSB7fTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICB1cmwgPSB1cmwgJiYgdXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybDtcblxuICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPTYwMTAzLHA9NjAxMDY7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztleHBvcnRzLlN0cmljdE1vZGU9NjAxMDg7ZXhwb3J0cy5Qcm9maWxlcj02MDExNDt2YXIgcT02MDEwOSxyPTYwMTEwLHQ9NjAxMTI7ZXhwb3J0cy5TdXNwZW5zZT02MDExMzt2YXIgdT02MDExNSx2PTYwMTE2O1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHc9U3ltYm9sLmZvcjtuPXcoXCJyZWFjdC5lbGVtZW50XCIpO3A9dyhcInJlYWN0LnBvcnRhbFwiKTtleHBvcnRzLkZyYWdtZW50PXcoXCJyZWFjdC5mcmFnbWVudFwiKTtleHBvcnRzLlN0cmljdE1vZGU9dyhcInJlYWN0LnN0cmljdF9tb2RlXCIpO2V4cG9ydHMuUHJvZmlsZXI9dyhcInJlYWN0LnByb2ZpbGVyXCIpO3E9dyhcInJlYWN0LnByb3ZpZGVyXCIpO3I9dyhcInJlYWN0LmNvbnRleHRcIik7dD13KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7ZXhwb3J0cy5TdXNwZW5zZT13KFwicmVhY3Quc3VzcGVuc2VcIik7dT13KFwicmVhY3QubWVtb1wiKTt2PXcoXCJyZWFjdC5sYXp5XCIpfXZhciB4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEI9e307ZnVuY3Rpb24gQyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfUMucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Qy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKHooODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0MucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZT1DLnByb3RvdHlwZTtmdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEQ7Ri5jb25zdHJ1Y3Rvcj1FO2woRixDLnByb3RvdHlwZSk7Ri5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsYyl7dmFyIGUsZD17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilILmNhbGwoYixlKSYmIUkuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09ZFtlXSYmKGRbZV09Z1tlXSk7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19XG5mdW5jdGlvbiBLKGEsYil7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ufWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nO2Z1bmN0aW9uIE4oYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBPKGEsYixjLGUsZCl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIG46Y2FzZSBwOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxkPWQoaCksYT1cIlwiPT09ZT9cIi5cIitOKGgsMCk6ZSxBcnJheS5pc0FycmF5KGQpPyhjPVwiXCIsbnVsbCE9YSYmKGM9YS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpLE8oZCxiLGMsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1kJiYoTChkKSYmKGQ9SyhkLGMrKCFkLmtleXx8aCYmaC5rZXk9PT1kLmtleT9cIlwiOihcIlwiK2Qua2V5KS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goZCkpLDE7aD0wO2U9XCJcIj09PWU/XCIuXCI6ZStcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgZz1cbjA7ZzxhLmxlbmd0aDtnKyspe2s9YVtnXTt2YXIgZj1lK04oayxnKTtoKz1PKGssYixjLGYsZCl9ZWxzZSBpZihmPXkoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWUrTihrLGcrKyksaCs9TyhrLGIsYyxmLGQpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1cIlwiK2EsRXJyb3IoeigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gUChhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXSxkPTA7TyhhLGUsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoYyxhLGQrKyl9KTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTthLl9zdGF0dXM9MDthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdDt0aHJvdyBhLl9yZXN1bHQ7fXZhciBSPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFMoKXt2YXIgYT1SLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeigzMjEpKTtyZXR1cm4gYX12YXIgVD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpSLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOnt0cmFuc2l0aW9uOjB9LFJlYWN0Q3VycmVudE93bmVyOkcsSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtcbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpQLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe1AoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtQKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUChhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFMKGEpKXRocm93IEVycm9yKHooMTQzKSk7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1DO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1FO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcih6KDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUguY2FsbChiLGYpJiYhSS5oYXNPd25Qcm9wZXJ0eShmKSYmKGVbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7Zm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxcbmtleTpkLHJlZjprLHByb3BzOmUsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjpyLF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6cSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9SjtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TDtcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlF9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6dSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyJdLCJzb3VyY2VSb290IjoiIn0=